<?php
	function displayErrorMessage(){
		if (isset($_SESSION['errorMessage'])){
			echo "<p class='error'>";
			echo $_SESSION['errorMessage'];
			echo "</p>";
			$_SESSION['errorMessage'] = null;					
		}
	}

	function getSQLConnector(){
		$pdo = new PDO('mysql:host=localhost;dbname=authentication', 'root', ''); 
		$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); 
		return $pdo;
	}

	function signup(array $data){		
		try { // Check for existing usernames		
			$result = getSQLConnector()->prepare(''.
				'SELECT * '.
				'FROM admins '.
				'WHERE username = :username'); 
			$result->bindValue(":username", $data['username']);
			$result->bindValue(":password", $data['password']);
			$result->execute();
									
			if ($result->rowCount() > 0){ 
				$_SESSION['errorMessage'] = 'Username already exists';				
				header("Location: http://{$_SERVER['HTTP_HOST']}/cab230-assignment1/signup.php");
				exit();
			}
		} catch (PDOException $e) { 
			echo $e->getMessage(); 
			$_SESSION['errorMessage'] = 'Something went wrong';	
			header("Location: http://{$_SERVER['HTTP_HOST']}/cab230-assignment1/signup.php");
			exit();
		}
		
		try { // Create new user		
			$result = getSQLConnector()->prepare(''.
				'INSERT INTO admins (username, salt, password) '.
				'VALUES (:username, salt ,SHA2(CONCAT(:password, salt), 0))'); .
				
			$result->bindValue(":username", htmlspecialchars($data['email'], ENT_QUOTES, 'UTF-8'));
			$result->bindValue(":password", htmlspecialchars($data['password'], ENT_QUOTES, 'UTF-8'));;
			$result->execute();
									
			if ($result->rowCount() > 0){ 
				session_start(); 
				session_id();
				$_SESSION['isLoggedOn'] = true;
				$_SESSION['username'] = $data['username'];
				
				header("Location: http://{$_SERVER['HTTP_HOST']}/cab230-assignment1/index.php?sessionId=");
				exit();
			} else {			
				$_SESSION['errorMessage'] = 'Failed to log on. Please check your email and password';			
			}
		} catch (PDOException $e) { 
			echo $e->getMessage(); 
			$_SESSION['errorMessage'] = 'Something went wrong';
		};
	}


	function logout(){
		session_id();		
		// Unset all of the session variables.
		$_SESSION = array();

		// If it's desired to kill the session, also delete the session cookie.
		// Note: This will destroy the session, and not just the session data!
		if (ini_get("session.use_cookies")) {
			$params = session_get_cookie_params();
			setcookie(session_name(), '', time() - 42000,
				$params["path"], $params["domain"],
				$params["secure"], $params["httponly"]
			);
		}
		// Finally, destroy the session.
		session_destroy();		
	}

	function login(array $data){	
		$pdo = new PDO('mysql:host=localhost;dbname=authentication', 'root', ''); 
		$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); 
		
		try { 			
			$result = $pdo->prepare('SELECT * '.
									'FROM admins '.
									'WHERE username = :username and '.
									'password = SHA2(CONCAT(:password, salt), 0)'); 
			$result->bindValue(":username", $data['username']);
			$result->bindValue(":password", $data['password']);
			$result->execute();
									
			if ($result->rowCount() > 0){ 
				session_start(); 
				session_id();
				$_SESSION['isLoggedOn'] = true;
				$_SESSION['username'] = $data['username'];
				
				header("Location: http://{$_SERVER['HTTP_HOST']}/cab230-assignment1/index.php?sessionId=");
				exit();
			} else {			
				$_SESSION['errorMessage'] = 'Failed to log on. Please check your email and password';			
			}
		} catch (PDOException $e) { 
			echo $e->getMessage(); 
			$_SESSION['errorMessage'] = 'Something went wrong';
		}
		
		header("Location: http://{$_SERVER['HTTP_HOST']}/cab230-assignment1/login.php");
	}
	
	function display_month($month, $year) {
		
		$first_day_of_month = mktime(0, 0, 0, $month, 1, $year);
		$first_day_of_week = date('w', $first_day_of_month);
		$month_name = date('F', $first_day_of_month);
		$days_in_month = date('t', $first_day_of_month);
		
		$current_year = gmDate("Y");
		$current_month = gmDate("m");
		$current_day = gmDate("d");
		
		echo "<h2>".$month_name." ".$year."</h2>";
		echo "<table border='solid'><tr><th>Sun</th><th>Mon</th><th>Tue</th><th>Wed</th><th>Thu</th><th>Fri</th><th>Sat</th></tr>";
		
		if ($first_day_of_week > 0){
			echo "<td colspan=\"$first_day_of_week\">&nbsp;</td>";
		};
		
		for ($day_of_week = $first_day_of_week, $day_of_month=1;$day_of_month <= $days_in_month; $day_of_month++, $day_of_week++){
			if ($day_of_week == 7) # if past end of week
			{
				echo '</tr>'; # end the row for the current week
				$day_of_week = 0; # reset to the start of the week
				echo '<tr>'; # create a row for the next week
			}
			if ($current_year == $year && $current_month == $month && $current_day == $day_of_month){
				echo "<td><b>$day_of_month</b></td>";
			}else{
				echo "<td>$day_of_month</td>";
			}
		}
		
		$last_day_of_month = mktime(0, 0, 0, $month, $days_in_month, $year);
		$last_day_of_week = date('w', $last_day_of_month);
		
		
		
		if ($last_day_of_week < 6){
			$num_empty_cols = 6 - $last_day_of_week;
			echo "<td colspan=\"$num_empty_cols\">&nbsp;</td>";
		};
		echo "<tr></tr></table>";

		}

	function query_park_column($field, $value){
		$pdo = new PDO('mysql:host=tailwagz.cfvove2ohkes.ap-southeast-2.rds.amazonaws.com;dbname=n9155554', 'admin', 'masterpassword');
		return $pdo -> query("SELECT * FROM parks WHERE $field = '$value';");
	}

	function get_all_suburbs(){
		$pdo = new PDO('mysql:host=tailwagz.cfvove2ohkes.ap-southeast-2.rds.amazonaws.com;dbname=n9155554', 'admin', 'masterpassword');
		$result = $pdo -> query("SELECT DISTINCT suburb from parks");
		$suburbs = array_fill(1, $result->rowCount() - 1, 1);
		foreach($result as $key => $row){
			$suburbs[$key] = $row['suburb'];
		}
		sort($suburbs);

		return $suburbs;
	}
	
	function perform_sql_query($pdo, $query, array $parameters){
		 
		 try {
			$result = get_sql_connector_aws()->prepare('SELECT DISTINCT suburb FROM parks ORDER BY suburb ASC');
			$result->execute();
				
			if ($result->rowCount() < 1){
				exit();
			}
			
			foreach($result as $key => $row){
				echo "<option value=\"".$row['suburb']."\">".$row['suburb']."</option>";
			}
		} catch (PDOException $e) {
			$_SESSION['errorMessage'] = $e->getMessage();
			header("Location: http://{$_SERVER['HTTP_HOST']}/cab230-assignment1/search.php");
		}
		return null;
		  
		 /*try {			 
			$result = $pdo->prepare($query);			
			if (!is_null($parameters)){
				foreach($parameters as $value){
					//$result->bindValue(key($parameters), $value);
				}
			}			
			$result->execute();			
			return $result;
		} catch (PDOException $e) {
			$_SESSION['errorMessage'] = $e->getMessage();
			header("Location: http://{$_SERVER['HTTP_HOST']}/cab230-assignment1/error.php");
			exit();
		}*/
	 }
	 
	 function add_suburb_options(){
		/*try {
			$result = get_sql_connector_aws()->prepare('SELECT DISTINCT suburb FROM parks ORDER BY suburb ASC');
			$result->execute();
				
			if ($result->rowCount() < 1){
				exit();
			}
			
			foreach($result as $key => $row){
				echo "<option value=\"".$row['suburb']."\">".$row['suburb']."</option>";
			}
		} catch (PDOException $e) {
			$_SESSION['errorMessage'] = $e->getMessage();
			header("Location: http://{$_SERVER['HTTP_HOST']}/cab230-assignment1/search.php");
		}*/
		
		/*$pdo = get_sql_connector_aws();
		$query = 'SELECT DISTINCT suburb FROM parks ORDER BY suburb ASC';
		$parameters = null;
		$result = perform_sql_query($pdo, $query, $parameters);*/
		$result = perform_sql_query(null, null, null);
	
		/*if ($result->rowCount() < 1 || is_null($result)){
				exit();
		}
		
		foreach($result as $key => $row){
			echo "<option value=\"".$row['suburb']."\">".$row['suburb']."</option>";
		}*/
	 }
?>

while($value = current($_GET)){
			if ($value != ""){		
				$field = key($_GET);
				$query = "SELECT * FROM parks WHERE $field = $value";
				return perform_sql_query($pdo, $query, null);
			}
			next($_GET);
		}